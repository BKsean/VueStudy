1. node 설치
2. npm으로 Vue설치
3. npm으로 vue cli 설치
4. 원하는 프로젝트에서 vue cli로 create vue 프로젝트명으로 프로젝트 생성
5. vscode에서 해당 폴더 불러오고 vetur패키지? 설치
6. package.json --> 사용하기위한 dependency등록   **패키지 추가 등록시 리로드는 어떻게?
7. index.html --> 빌드하면 나중에 스크립트가 자동으로 들어간다는데?
8. main.js 

* TypeScript와같이 사용하는 방법
* 해당 js및 html을 MVC프로젝트에 적용방법
* thymleaf? 와 같이 사용하는 방법

======================================================================================================

*기본적인 구조
<template>  //html코드값 들어감
    <div></div>
</template>


<script></script>

<style></style>

*함수생성

*이벤트 매핑

*이벤트로 변수 변경
*ref와 reactive
 ref와 reactive의 차이점
타입 제한
ref에서는 String, Number, Object 등 어떠한 타입에서도 사용할 수 있습니다.
반면 reactive에서는 Object, array, Map, Set과 같은 타입에서만 사용할 수 있습니다.

접근 방식
ref에서는 .value property를 붙여 접근할 수 있습니다. <templete>에서 변수를 명시할 때에는 붙일 필요가 없습니다.
reactive에서는 .value를 붙일 필요가 없이 <templete>에서 사용하는 자바스크립트 문법처럼 사용하시면 됩니다.

*데이터 바인딩
v-bind:class --> :class 로사용가능
v-on:click --> @click 로 사용가능
v-model ---> 양방향으로 데이터 매핑 가능 @input 으로 value값 변경 이벤트를 바인딩할 필요가 없음
v-for="a in todos" v-bind:key="a.id"

v-show --> 아닌경우에 DOM에 존재하지만 display:none상태임
<div v-show="toggle">true</div>
<div v-show="!toggle">flase</div>

v-if  --> 아닌경우에 DOM에서 없어짐
<div v-if="toggle">true</div>
<div v-else>false</div>

*체크박스 바인딩
<input class="form-check-input" type="checkbox" v-model="a.completed">
        <label
          class="form-check-label"
        >{{ a.subject }}</label>

*스타일,class바인딩
<label
          class="form-check-label" :style="a.completed ? complete : {}"
        :class="{active : a.completed}">{{ a.subject }}</label>

const complete = {
      textDecoration: 'line-through',
      color: 'gray'
    }

<style>
.active{
  font-size: 15px;
  color: rgb(19, 19, 212);
}
</style>

*해야할일 삭제
<button class="btn btn-danger btn-sm" @click="removeTodo(a.id)">삭제</button>
const removeTodo = (id)=>{
    todos.value.pop(id);
  }

  *컴포넌트 분리 
  새로운 .VUE파일을 만들어서 코드의 복잡성및 유지보수성을 위해 컴포넌트를 분리한다. 
  import TodoSimpleForm from './components/TodoSimple.vue';
export default {
  components:{
    TodoSimpleForm,
},

*분리된 컴포넌트를 부모에서 사용
<TodoSimpleForm/>

  *컴포넌트로 분리시 부모 컴포넌트에 데이터 전달 방법
  setup(props,context){ 으로 setup파라미터 설정
   context.emit('add-todo',{
             id: Date.now(),
             subject: todo.value,
             completed:false
             });
으로 데이터 전달 여기선 객체 
부모 컴포넌트에서 자식컴포넌트 사용부분에섯 받는 데이터 설정
<TodoSimpleForm @add-todo="addTodo*이건이벤트 함수" />


*부모컴포넌트에서 자식컴포넌트로 데이터 전송
컴포넌트 분리후 부모에서 자식컴포넌트 사용하는 부분에 다음과 같이 데이터 전송
<TodoList :todos<-이건 전달되는 변수="todos"/> 

자식 컴포넌트에서 데이터 바는 방법
export default{
        props: ['todos']
        // props: {  이것과 같이 타입,필수여부등을 설정가능
        //     todos:{
        //         type: Array,
        //         required: true
        //     }
        // }
    }

    &&주의할점 props로 전달되는 데이터는 one way data flow다 
    즉 자식에서 변경해봤자 데이터가 변경되지 않는다. 변경하려면
    부모 컴포넌트에서 변경할것

    emits옵션? 자식 컴포넌트는 하나의 html태크로 감싸줘야한다?
    --> 그대로 되지만 emits: ['toggle-todo','delete-todo']로 해당 컴포넌트에서 사용중인 emit이름들을 정리하면 된다.
    
    setup(props,{emit--> context대신 emit만 꺼내와서 사용가능}){
            const toggleTodo=(index) =>{
                emit('toggle-todo',index); //부모 컴포넌트에 toggle-todo라는 이름으로 index데이터 전달
            }

            const removeTodo=(id) =>{
                emit('delete-todo',id); //부모 컴포넌트에 delete-todo라는 이름으로 id데이터 전달
            }
            
            
            return{
            toggleTodo,removeTodo
        }
        }

*Computed
import {computed} from 'vue';
let count = ref(1);
let doubleCount = computed(() => {
  return count.value *2;
});

count의 값의 변경을 감지하여 doubleCount호출시 자동으로 변경된
count값의 *2를 하여 반환한다. 

<h3>doubleCountComputed : {{ doubleCountComputed }}</h3>
<h3>doubleCountMethod : {{ doubleCountMethod() }}</h3>

const doubleCountMethod = () =>{
      return count.value *2;
    }

computed와 method의 차이점
computed는 호출하는것을 보면 알수있듯이 값을 리턴한다. ()를안쓴다는 뜻
computed는 파라미터를 받을 수없다
참조변수가 변경될때 실행한다
computed는 값을 캐쉬한다. (즉 여러번사용할떄 함수는 사용할떄마다 실행되지만 computed는 한번 실행되면 해당 값을 캐쉬하기때문에 재실행되지 않는다.)

TOdoDb에저장하기
npm으로 가상 json뭐시기 설치하지 restful하게 사용할 수있는 DB를 제공해줬다

async/await

async 키워드를 함수 압에 사용하면 해당 함수는 비동기가된다
await 를 사용하면 axios요청의 응답을 기다린다는 뜻
 const addTodo = async (object) => {
      //데이터베이스에 todo저장 post request이용
      const res = await axios.post('http://localhost:3000/todos',{
        subject: object.subject,
        completed: object.completed
      })
        
    }

    *axios를 이용해 데이터 입력 및 삭제 구현
    *axios를 이용해 데이터 변경
    --> put,patch 메소드를 사용할수 있는데 
    put: 데이터 전체를 변경할떄
    patch : 데이터 일부분만 변경할때 
    사용된다고 한다. 


*Pagination
한페이지당 보여줄 게시물개수, 전체 개시물개수 만있으면
페이지 네이션 컨트롤 가능 
TODO
추가로 5개 페이지만 표시하고 싶다 + 5번째 페이지 이후 넥스트페이지 선택시 6,7,8,9,10 으로 표시되도록 하는것
추가로 마지막 페이지 이동 등등 추가 필요

*watfch effect
import { ref,watchEffect} from 'vue';
    watchEffect(()=>{
      console.log(numberOfPages.value);
    })

    뷰에서 관리되는 변수가 변경되면 감지해서 자동으로 실행하는 함수
    ref,reactive,props등등 다 적용됨

  *watch
  watchEffect와 비슷하다
    watch(currentPage(관리할 변수),(currentPage,prev(변경되기전 변수값)) =>{
      console.log(currentPage,prev);
    })

    reactive의 경우 객체이기 때문에 객체안에 특정값으로 watch가능
    watch(()=>a.b,(current,prev)=>{
      ....
    })
    여러값 watch
    watch(()=>[a.b,a.c],(current,prev)=>{
      .... 결과값도 배열로 나온다.
    })

    검색부분에 watch를 적용하여 키보드 입력시 변경 감지를 통해 getTodos함수 실행으로 검색되게 수정
    settimeout 및 clearTimeout으로 지연검색 하게 변경
    let timeout= null;
      watch(searchText,async()=>{ 
        clearTimeout(timeout);
        
        timeout = setTimeout(()=>{
          getTodos(1);          
        },1500)
        
      })

*vue router
vue rounter설치 필요 npm install vuerouter@3 인가?
이우 router폴더 생성후 index.js생성
거기서 router설정 정보 설정 
url별 보여줄 component생성 이경우 pages폴더 하위에 경로별 폴더및 파일을 생성한다.

그리고 App.vue에서 
  <RouterView/>
  <router-view/>
  둘중 아무거나 사용하면 해당 /url에 생성한 component가 적용됨

    import TodoSimpleForm from './components/TodoSimple.vue';
    @의미는 src경로를 의미한대

*router-link
vuejs는 로딩시 모든소스를 가져와 설정한다 이후 데이터만 가져와서 template에 끼워 넣는식으로 동작하는데
a href같은 이동시 로딩이 일어나면서 모든 데이터를 다시 가져오는 비효율적인 일이 발생한다.
--> a태그를 router-link로 변경하면 페이지 로딩없이 이동 가능하게 된다 
<RouterLink class="nav-link" to="/todos">Todos</RouterLink>


라우트에서 변수를 받아서 사용하는 방법
      {
            path:'/todos/:id',
            name:'todo',
            component:Todo
        },

import { useRoute } from 'vue-router';
    export default{
        setup(){
            const route = useRoute();
            console.log(route.params);
        }
    }
    
router페이지 이동
import { useRouter } from 'vue-router';
const router = useRouter();
      const moveToPage = (id) =>{
              console.log(id);
              router.push('/todos/'+id);
            }

router 이름으로 이동 하는 방법 --> router.push에서도 이름으로 이동가능하다.
<RouterLink class="nav-link" :to="{name: 'Todos'}">Todos</RouterLink>
<RouterLink class="navbar-brand" to="/">Home</RouterLink>

*이벤트 버블링
자식요소의 이벤트를 실행시 이벤트 버블링으로 인해 최상단 부모의 이벤트까지 실행되는 것
<button class="btn btn-danger btn-sm" @click.stop="removeTodo(a.id)">삭제</button>
@click.stop ---> 상위로 이벤트 전파 막는 요소

@change보다 @click이 먼저 실행되는것 같다 
따라서 @change.stop해도 상위 @click은 실행된다. 따라서 @change에서 별도로 @click.stop을 추가하면 막을수있다. 

*객체 복사 및 todos 상세보기 컴포넌트및 수정 저장 기능 추가
변수1 = res.data;
변수2 = res.data;
변수1수정시 변수2도 변경됨
변수1 = {...res.data};
변수2 = {...res.data};
lodash로 객체 비교 해봄

*Toast컴포넌트

*컴포넌트 라이프사이클 


*TODO create page만들기
 import TodoList from '@/components/TodoList.vue'
  import {TodoList} from '@/components/TodoList.vue'
  뭐가 맞게? 이것때문에 30분 소비함
  컴포넌트 불리하고 공용으로 사용할 컴포넌트로 만들고 !!!
  props로 부모에서 불러오는 컴포넌트의 보여줄 컨텐츠 구분


  *scoped style
  <style scoped> //scoped 키워드는 해당 컴포넌트만 적용되는 스타일 적용
    .text-red{
        color:red;
    }
</style>
없으면 전역적으로 스타일 적용 가능 


*삭제시 modal창을 띄워 사용자 확인후 삭제로직하는 기능 추가

*Teleport모달창
  <teleport to='#sean' >
  <div>111111111</div>
  </teleport>

  *slot
  모달사용시 text같은 경우에는 부모컴포넌트에서 props에서 받아서 사용할수있지만
  태그나 로직은 받아서 사용할수없다. 이럴떄 사용하는게 slot
  List.vue와 TodoList.vue의 관계를 살펴보면 template slot사용 활용을 확인할 수 있다. 
  리스트를 공통 컴포넌트로 만들기 위해 List.vue로 뺴고 
   <div v-for="(item,index) in items" :key="item.id" class="card mt-2">
    <slot name="listTemplate" :item(이이름으로)="item(이테이터전송)" :index="index"></slot>  
  </div>

  TodoList.vue에서는
   <List
    :items="todos"  //리스트 목록을 List.vue에서 보여주기위해
  >
  <template #listTemplate="slotProps">  //slotProps는 List.vue slot에서 보낸 데이터를 받는 부분이다. slotProps.item , slotProps.index처럼 사용 가능하다
    리스트 렌더링 로직
  </template>
  </List>

  * 컴포넌트에 v-model사용하기 
  기존 v-model을 사용하는 부분을 컴포넌트로 분리할때 변수를 내리고 올리고 하는 번거러움을 대처
  TodoForm.vue
  <Input label="" :error="subjectError"              
                v-model:subject="todo.subject"
                />

 input.vue

 props : {
        subject : {
            type : String,
            requirement : true
        }
    },

..
..
emit('update:subject',e.target.value);
v-model:subject="todo.subject"  v-model:자식에서 받는 변수명="실제 넘길 데이터"
'update:subject'  'update:받은 변수명'

*함수 export import 예시
함수 export시 선언 방법에 따라 import방법도 다르다 
export const useCount = () => {

}
import { useCount }

export default useCount
import useCount

*toRefs 
reactive 개체 A를 export할때  const state = reactive({count:0})
import한곳에서 구조분해로 내부 프로퍼티가 count가 있을경우 
{count} 로 받아와서 해당 값을 변경하는 로직을 따른다면
A는 reactive하지만
구조분해로 가져온 count값은 reactive가 아니기 때문에 변경되지 않는다. 
이럴떄 export시 toRefs(status)로 감싸주면 안에 값들이 ref변수로 변경된다. 

*axios baseUrl

axios baseUrl를 사용해서 기본적인 url을 설정할 수 있다. 

*vuex
컴포넌트 분리를이용해 몇단계 위의 컴포넌트로 이동한다면 
즉 emit을 이용해 최상단까지 컴포넌트까지 올리기기 위해서 n단계의 emit이 필요하다면
vuex를 사용한다고 한다.
vuex는 state를 저장하는 공간을 두로 여러 컴포넌트에서 depth와 상관없이 접근 하도록 한다.

vuex설치

npm install vuex@next --save
이후
store폴더 하위 index.js파일에 vuex설정하고 

main.js에서 router처럼 사용하게 설정
import router from './router'; //index.js생략가능하데
import store from '@/store/index'
createApp(App).use(store).use(router).mount('#app')